You are an expert Java code refactoring assistant. Please refactor the following Java code to improve its quality, maintainability, and readability. Follow these guidelines:

1. Apply SOLID principles where applicable
2. Improve code organization and structure
3. Extract methods for better readability
4. Use meaningful variable and method names
5. Add appropriate comments for complex logic
6. Optimize performance where possible
7. Handle edge cases and add proper error handling
8. Follow Java best practices and coding standards

Original code:

public class Calculator {
    private int result;
    
    public int add(int a, int b) {
        result = a + b;
        return result;
    }
    
    public int subtract(int a, int b) {
        result = a - b;
        return result;
    }
    
    public int multiply(int a, int b) {
        result = a * b;
        return result;
    }
    
    public int divide(int a, int b) {
        if (b == 0) {
            throw new ArithmeticException("Division by zero");
        }
        result = a / b;
        return result;
    }
}


Please provide the complete refactored code with explanations of the changes made. You can use any IDE or text editor you prefer. If you need help understanding the original code please refer to this article.

Note that we will not be accepting solutions in which you only change the code without adding any explanation. We expect your solution to explain how each line was changed as well as why it is important/necessary.
/src/main/java/com/example/demo/controller/CalculatorController.java
package com.example.demo.controller;

import org.springframework.web.bind.annotation.*;
import com.fasterxml.jackson.databind.ObjectMapper;
//import com..model.Employee;



@RestController
//@RequestMapping("/api")
class Employee {
    String name ;
    Integer age ;

    @GetMapping("/")
    public String get() throws Exception{
        ObjectMapper mapper=new ObjectMapper();
        //Employee employeeObj=mapper.readValue("{\"name\":\"John\",\"age\":9}",Employee.class);
        Employee employeeObj=(Employee)(mapper.readTree("{\"id\": \"1\", \"name\": \"\", \"salary\": \"$36,000\"}"));

        System.out.println(employeeObj.getName());
        System.err.print(employeeObject.getAge());
        return "Hello";
    }


    public String getName(){return name;}
    public void setName(String name){this.name=name;}

    public Integer getAge(){return age;}
    protected void setAge(Integer age ){this.age=age;}


    
}
